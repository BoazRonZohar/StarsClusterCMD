# Cluster_Full_Analysis_CMD_7.py
# ============================================
# Full pipeline with interactive user input
# Uses parameter presets from cluster_parameter_presets.py
# ============================================

import os
import sys
import pandas as pd

# Import parameter presets
import cluster_parameter_presets as presets

# =======================================================
# Interactive user input
# =======================================================
def get_user_input(prompt, default=None, cast_func=str):
    """Helper to get user input with default fallback."""
    val = input(prompt).strip()
    if val == "" or val == "0":
        return default
    try:
        return cast_func(val)
    except Exception:
        return default

print("=== Cluster Analysis Interactive Input ===")

cluster_name = get_user_input("Cluster name: ", default="UnknownCluster", cast_func=str)
cluster_distance = get_user_input("Cluster distance (pc): ", default=1000, cast_func=float)
cluster_type = get_user_input("Cluster type [O=open, G=globular]: ", default="O", cast_func=str).upper()
galactic_extinction = get_user_input("Galactic extinction A_V: ", default=0.0, cast_func=float)
galactic_reddening = get_user_input("Galactic reddening E(B-V): ", default=0.0, cast_func=float)
fits_B_path = get_user_input("Path to B-band FITS image: ", default="default_B.fits", cast_func=str)
fits_GV_path = get_user_input("Path to G- or V-band FITS image: ", default="default_GV.fits", cast_func=str)
gaia_csv_path = get_user_input("Path to Gaia CSV file: ", default="gaia.csv", cast_func=str)

print("\n=== Input summary ===")
print(f"Cluster: {cluster_name}")
print(f"Distance: {cluster_distance} pc")
print(f"Type: {cluster_type}")
print(f"A_V: {galactic_extinction}")
print(f"E(B-V): {galactic_reddening}")
print(f"B image: {fits_B_path}")
print(f"G/V image: {fits_GV_path}")
print(f"Gaia data: {gaia_csv_path}")
print("==========================================\n")

# =======================================================
# Select parameter block
# =======================================================
if cluster_type == "O":
    if cluster_distance <= 1000:
        # Sparse nearby open cluster
        DAO_FWHM           = presets.DAO_FWHM
        DAO_THRESH_SIGMA   = 3.5
        PEAK_SNR_MIN       = 8.0
        MATCH_MAX_ARCSEC   = 3.0
        PARALLAX_MIN_HALF  = 0.10
        PARALLAX_MAX_HALF  = 2.00
        PARALLAX_FRAC      = 1.00
        PARALLAX_ERR_SIGMA = 4.0
        PM_SIGMA_FLOOR     = 0.8
        PM_ERR_SIGMA       = 4.0
        PM_CHI2            = 25.0
        SPATIAL_CORE_FRAC  = 0.35
    else:
        # Moderately distant open cluster
        DAO_FWHM           = presets.DAO_FWHM
        DAO_THRESH_SIGMA   = 4.0
        PEAK_SNR_MIN       = 10.0
        MATCH_MAX_ARCSEC   = 2.0
        PARALLAX_MIN_HALF  = 0.08
        PARALLAX_MAX_HALF  = 3.00
        PARALLAX_FRAC      = 10.0
        PARALLAX_ERR_SIGMA = 6.0
        PM_SIGMA_FLOOR     = 1.2
        PM_ERR_SIGMA       = 6.0
        PM_CHI2            = 40.0
        SPATIAL_CORE_FRAC  = 0.25
elif cluster_type == "G":
    # Globular cluster
    DAO_FWHM           = presets.DAO_FWHM
    DAO_THRESH_SIGMA   = 5.0
    PEAK_SNR_MIN       = 15.0
    MATCH_MAX_ARCSEC   = 1.0
    PARALLAX_MIN_HALF  = 0.05
    PARALLAX_MAX_HALF  = 5.00
    PARALLAX_FRAC      = 100.0
    PARALLAX_ERR_SIGMA = 6.0
    PM_SIGMA_FLOOR     = 1.5
    PM_ERR_SIGMA       = 8.0
    PM_CHI2            = 50.0
    SPATIAL_CORE_FRAC  = 0.30
else:
    print("Invalid cluster type, defaulting to open (moderately distant).")
    DAO_FWHM           = presets.DAO_FWHM
    DAO_THRESH_SIGMA   = 4.0
    PEAK_SNR_MIN       = 10.0
    MATCH_MAX_ARCSEC   = 2.0
    PARALLAX_MIN_HALF  = 0.08
    PARALLAX_MAX_HALF  = 3.00
    PARALLAX_FRAC      = 10.0
    PARALLAX_ERR_SIGMA = 6.0
    PM_SIGMA_FLOOR     = 1.2
    PM_ERR_SIGMA       = 6.0
    PM_CHI2            = 40.0
    SPATIAL_CORE_FRAC  = 0.25

# Common parameters
K_APERTURE         = 1.2
K_ANNULUS_IN       = 2.5
K_ANNULUS_OUT      = 4.0
GAIN_E_PER_ADU     = 1.0
READ_NOISE_E       = 5.0
FWHM_BOX_SIZE      = 24

CALIB_MATCH_MAX_ARCSEC = 10
CALIB_G_MAG_RANGE      = (10.0, 19.0)
CALIB_BP_MAG_RANGE     = (10.0, 19.5)

# Set distance and extinction/reddening from user
CLUSTER_DISTANCE_PC = cluster_distance
AG_EXTINCTION       = galactic_extinction
EBG_REDDENING       = galactic_reddening

# =======================================================
# Continue with the rest of your pipeline
# NOTE: Replace this section with the original analysis code
# (photometry, Gaia crossmatch, membership, CMD plotting, saving CSVs).
# =======================================================
print("Running analysis pipeline with selected parameters...")
# ... your unchanged analysis functions go here ...
# process_fits(), match_with_gaia(), compute_membership(), plot_cmd(), etc.

print("Analysis finished. Results saved to photometry_with_membership.csv and plots.")
